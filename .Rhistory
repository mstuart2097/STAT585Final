NFLTeams <- gsub(":",",",NFLTeams)
NFLTeams <- gsub(" Division","",NFLTeams)
for (i in 1:8) {NFLTeams[i] = ifelse(i<=4,paste("AFC",NFLTeams[i]),paste("NFC",NFLTeams[i]))}
tmp <- as.data.frame(NFLTeams) %>% separate(col=NFLTeams,into=c("Division","Team1","Team2","Team3","Team4"),sep=", ")
NFLTeams <- tmp %>% gather(key="ID",value="Team",c(2:5)) %>% arrange(Division,Team) %>% select(Team,Division)
for (j in 1:48) {NFLTeams$Team[grep(dat$AwayTeam[j],NFLTeams$Team)] <- dat$AwayTeam[j]}
NFLTeams$Conference <- substr(NFLTeams$Division,1,3)
NFLTeams$Ties <- NFLTeams$Losses <- NFLTeams$Wins <- 0
NFLTeams$ConfTies <- NFLTeams$ConfLosses <- NFLTeams$ConfWins <- 0
NFLTeams$DivTies <- NFLTeams$DivLosses <- NFLTeams$DivWins <- 0
NFLTeams$SOS <- NFLTeams$SOV <- 1
NFLTeams$ConfPtAllowed <- NFLTeams$ConfPtScored <- 0
NFLTeams$AllPtAllowed <- NFLTeams$AllPtScored <- 0
NFLTeams$AllPtRank <- NFLTeams$ConfPtRank <- 0
setwd("C:/Users/matsu/Box Sync/Classes/Spring 2017/STAT 585X")
save("NFLTeams","ProjectNFL/data/NFLTeams.rda")
?save
save("NFLTeams",file="ProjectNFL/data/NFLTeams.rda")
library(ProjectNFL)
WeeklyUpdate(16)
dat <- WeeklyUpdate(16)
m <- UpdateTeams(data=dat)
m <- UpdateTeams(data=dat[is.na(dat$AwayScore)==FALSE,])
View(m)
HomeID
i <- 16
HomeID <- grep(data$HomeTeam[i],data$HomeTeam)
AwayID <- grep(data$HomeTeam[i],data$AwayTeam)
StatID <- grep(data$HomeTeam[i],NFLTeams$Team)
HomeVector <- sapply(data$AwayTeam[HomeID],function(x){grep(x,NFLTeams$Team)})
AwayVector <- sapply(data$HomeTeam[AwayID],function(x){grep(x,NFLTeams$Team)})
W <-
sum(NFLTeams$Wins[HomeVector][data$HomeScore[HomeID] - data$AwayScore[HomeID]>0]) +
sum(NFLTeams$Wins[AwayVector][data$HomeScore[AwayID] - data$AwayScore[AwayID]<0])
L <-
sum(NFLTeams$Losses[HomeVector][data$HomeScore[HomeID] - data$AwayScore[HomeID]>0]) +
sum(NFLTeams$Losses[AwayVector][data$HomeScore[AwayID] - data$AwayScore[AwayID]<0])
T <-
sum(NFLTeams$Ties[HomeVector][data$HomeScore[HomeID] - data$AwayScore[HomeID]>0]) +
sum(NFLTeams$Ties[AwayVector][data$HomeScore[AwayID] - data$AwayScore[AwayID]<0])
(W+0.5*T)/(W+L+T)
W
NFLTeams$Wins[StatID] <-
length(which(data$HomeScore[HomeID] - data$AwayScore[HomeID]>0))+
length(which(data$HomeScore[AwayID] - data$AwayScore[AwayID]<0))
NFLTeams$Wins
x <- UpdateTeams(WeeklyUpdate(16))
dat <- WeeklyUpdate(16)
x <- UpdateTeams(data=dat[is.na(dat$AwayScore)==FALSE,])
View(x)
x <- UpdateTeams(data=dat[is.na(dat$AwayScore)==FALSE,])
View(x)
library(ProjectNFL)
?CommonGames
d <- WeeklyUpdate(16)
library(tidyverse)
library(rvest)
d <- WeeklyUpdate(16)
View(d)
data <- d
raw <- data %>% gather(key="ID",value="Team",c(3,5)) %>% mutate(Score=ifelse(ID=="AwayTeam",AwayScore,HomeScore)) %>% select(Team,Score)
View(raw)
rawscore <- data %>% gather(key="ID",value="Team",c(3,5)) %>% mutate(Score=ifelse(ID=="AwayTeam",AwayScore,HomeScore)) %>% select(Team,Score)
rawagainst <- data %>% gather(key="ID",value="Team",c(3,5)) %>% mutate(Score=ifelse(ID=="AwayTeam",HomeScore,AwayScore)) %>% select(Team,Score)
statsscore <- rawscore %>% group_by(Team) %>% summarise(mean=mean(Score,na.rm=TRUE),sd=sd(Score,na.rm=TRUE))
statsagainst <- rawagainst %>% group_by(Team) %>% summarise(mean=mean(Score,na.rm=TRUE),sd=sd(Score,na.rm=TRUE))
View(rawagainst)
statsscore
statsagainst
?mean
mean(c(1,2))
sqrt(9)
load("C:/Users/matsu/Box Sync/Classes/Spring 2017/STAT 585X/ProjectNFL/data/NFLTeams.rda")
NFLTeams
?NFLTeams
library(ProjectNFL)
?NFLTeams
NFLTeams
UpdateTeams
library(ProjectNFL)
install.packages("rtools")
install.packages("Rtools")
UpdateTeams
UpdateTeams <- function(data = WeeklyUpdate()){
if(length(which(is.na(data$AwayScore)))!=0) stop("Data set must not have scores that are NAs")
for (i in 1:48){
HomeID <- grep(data$HomeTeam[i],data$HomeTeam)
AwayID <- grep(data$HomeTeam[i],data$AwayTeam)
StatID <- grep(data$HomeTeam[i],NFLTeams$Team)
HomeVector <- sapply(data$AwayTeam[HomeID],function(x){grep(x,NFLTeams$Team)})
AwayVector <- sapply(data$HomeTeam[AwayID],function(x){grep(x,NFLTeams$Team)})
NFLTeams$Wins[StatID] <-
length(which(data$HomeScore[HomeID] - data$AwayScore[HomeID]>0))+
length(which(data$HomeScore[AwayID] - data$AwayScore[AwayID]<0))
NFLTeams$Losses[StatID] <-
length(which(data$HomeScore[HomeID] - data$AwayScore[HomeID]<0))+
length(which(data$HomeScore[AwayID] - data$AwayScore[AwayID]>0))
NFLTeams$Ties[StatID] <-
length(which(data$HomeScore[HomeID] - data$AwayScore[HomeID]==0))+
length(which(data$HomeScore[AwayID] - data$AwayScore[AwayID]==0))
NFLTeams$ConfWins[StatID] <-
length(which(data$HomeScore[HomeID] - data$AwayScore[HomeID]>0 & NFLTeams$Conference[HomeVector]==NFLTeams$Conference[StatID]))+
length(which(data$HomeScore[AwayID] - data$AwayScore[AwayID]<0 & NFLTeams$Conference[AwayVector]==NFLTeams$Conference[StatID]))
NFLTeams$ConfLosses[StatID] <-
length(which(data$HomeScore[HomeID] - data$AwayScore[HomeID]<0 & NFLTeams$Conference[HomeVector]==NFLTeams$Conference[StatID]))+
length(which(data$HomeScore[AwayID] - data$AwayScore[AwayID]>0 & NFLTeams$Conference[AwayVector]==NFLTeams$Conference[StatID]))
NFLTeams$ConfTies[StatID] <-
length(which(data$HomeScore[HomeID] - data$AwayScore[HomeID]==0 & NFLTeams$Conference[HomeVector]==NFLTeams$Conference[StatID]))+
length(which(data$HomeScore[AwayID] - data$AwayScore[AwayID]==0 & NFLTeams$Conference[AwayVector]==NFLTeams$Conference[StatID]))
NFLTeams$DivWins[StatID] <-
length(which(data$HomeScore[HomeID] - data$AwayScore[HomeID]>0 & NFLTeams$Division[HomeVector]==NFLTeams$Division[StatID]))+
length(which(data$HomeScore[AwayID] - data$AwayScore[AwayID]<0 & NFLTeams$Division[AwayVector]==NFLTeams$Division[StatID]))
NFLTeams$DivLosses[StatID] <-
length(which(data$HomeScore[HomeID] - data$AwayScore[HomeID]<0 & NFLTeams$Division[HomeVector]==NFLTeams$Division[StatID]))+
length(which(data$HomeScore[AwayID] - data$AwayScore[AwayID]>0 & NFLTeams$Division[AwayVector]==NFLTeams$Division[StatID]))
NFLTeams$DivTies[StatID] <-
length(which(data$HomeScore[HomeID] - data$AwayScore[HomeID]==0 & NFLTeams$Division[HomeVector]==NFLTeams$Division[StatID]))+
length(which(data$HomeScore[AwayID] - data$AwayScore[AwayID]==0 & NFLTeams$Division[AwayVector]==NFLTeams$Division[StatID]))
NFLTeams$ConfPtScored[StatID]  <-
sum((data$HomeScore[HomeID])[NFLTeams$Conference[HomeVector]==NFLTeams$Conference[StatID]]) +
sum((data$AwayScore[AwayID])[NFLTeams$Conference[AwayVector]==NFLTeams$Conference[StatID]])
NFLTeams$ConfPtAllowed[StatID]  <-
sum((data$AwayScore[HomeID])[NFLTeams$Conference[HomeVector]==NFLTeams$Conference[StatID]]) +
sum((data$HomeScore[AwayID])[NFLTeams$Conference[AwayVector]==NFLTeams$Conference[StatID]])
NFLTeams$AllPtScored[StatID]  <-
sum((data$HomeScore[HomeID])) +
sum((data$AwayScore[AwayID]))
NFLTeams$AllPtAllowed[StatID]  <-
sum((data$AwayScore[HomeID])) +
sum((data$HomeScore[AwayID]))
}
for (i in 1:48){
HomeID <- grep(data$HomeTeam[i],data$HomeTeam)
AwayID <- grep(data$HomeTeam[i],data$AwayTeam)
StatID <- grep(data$HomeTeam[i],NFLTeams$Team)
HomeVector <- sapply(data$AwayTeam[HomeID],function(x){grep(x,NFLTeams$Team)})
AwayVector <- sapply(data$HomeTeam[AwayID],function(x){grep(x,NFLTeams$Team)})
W <-
sum(NFLTeams$Wins[HomeVector][data$HomeScore[HomeID] - data$AwayScore[HomeID]>0]) +
sum(NFLTeams$Wins[AwayVector][data$HomeScore[AwayID] - data$AwayScore[AwayID]<0])
L <-
sum(NFLTeams$Losses[HomeVector][data$HomeScore[HomeID] - data$AwayScore[HomeID]>0]) +
sum(NFLTeams$Losses[AwayVector][data$HomeScore[AwayID] - data$AwayScore[AwayID]<0])
T <-
sum(NFLTeams$Ties[HomeVector][data$HomeScore[HomeID] - data$AwayScore[HomeID]>0]) +
sum(NFLTeams$Ties[AwayVector][data$HomeScore[AwayID] - data$AwayScore[AwayID]<0])
NFLTeams$SOV[StatID] <- (W+0.5*T)/(W+L+T)
W <-
sum(NFLTeams$Wins[AwayVector]) +
sum(NFLTeams$Wins[HomeVector])
L <-
sum(NFLTeams$Losses[AwayVector]) +
sum(NFLTeams$Losses[HomeVector])
T <-
sum(NFLTeams$Ties[AwayVector]) +
sum(NFLTeams$Ties[HomeVector])
NFLTeams$SOS[StatID] <- (W+0.5*T)/(W+L+T)
}
NFLTeams$ConfPtRank <-
c(rank(NFLTeams$ConfPtScored[NFLTeams$Conference=="AFC"]),rank(NFLTeams$ConfPtScored[NFLTeams$Conference=="NFC"])) +
c(rank(-NFLTeams$ConfPtAllowed[NFLTeams$Conference=="AFC"]),rank(-NFLTeams$ConfPtAllowed[NFLTeams$Conference=="NFC"]))
NFLTeams$AllPtRank <- rank(NFLTeams$AllPtScored)+rank(-NFLTeams$AllPtAllowed)
NFLTeams
}
library(ProjectNFL)
UpdateTeams
library(ProjectNFL)
NFLSim
WeeklyScores <- function(Week=1){
require(rvest)
require(tidyverse)
url <- paste("http://www.nfl.com/schedules/2016/REG",Week,sep="")
html <- read_html(url)
NFL <- html %>% html_nodes(".schedules-list-date,.time,.away,.home") %>% html_text()
NFL <- gsub("\r","",gsub("\n","",gsub("\t","",NFL)))
Games <- length(which(NFL=="FINAL"))
for (i in 1:Games){
Date <- ifelse(NFL[(8*(i-1)+1)]!="FINAL",NFL[(8*(i-1)+1)],Date)
NFL <- if(i==1) {NFL} else if(NFL[(8*(i-1)+1)]==Date) {NFL} else {c(NFL[1:(8*(i-1))],Date,NFL[(8*(i-1)+1):(length(NFL))])}
}
tmp <- data.frame(matrix(NFL,nrow=Games,byrow=TRUE))
tmp <- tmp %>%
mutate(Date=as.character(X1),AwayTeam=as.character(X3),AwayScore=as.numeric(as.character(X5)),HomeTeam=as.character(X8),HomeScore=as.numeric(as.character(X6))) %>%
select(Date,AwayTeam,AwayScore,HomeTeam,HomeScore)
tmp
}
Week=1
url <- paste("http://www.nfl.com/schedules/2016/REG",Week,sep="")
html <- read_html(url)
require(rvest)
require(tidyverse)
url <- paste("http://www.nfl.com/schedules/2016/REG",Week,sep="")
html <- read_html(url)
NFL <- html %>% html_nodes(".schedules-list-date,.time,.team-name") %>% html_text()
NFL <- gsub("\r","",gsub("\n","",gsub("\t","",NFL)))
Games <- length(which(NFL=="FINAL"))
for (i in 1:Games){
Date <- ifelse(NFL[(4*(i-1)+1)]!="FINAL",NFL[(4*(i-1)+1)],Date)
NFL <- if(i==1) {NFL} else if(NFL[(4*(i-1)+1)]==Date) {NFL} else {c(NFL[1:(4*(i-1))],Date,NFL[(4*(i-1)+1):(length(NFL))])}
}
tmp <- data.frame(matrix(NFL,nrow=Games,byrow=TRUE))
tmp <- tmp %>%
mutate(Date=as.character(X1),AwayTeam=as.character(X3),AwayScore=rep("",Games),HomeTeam=as.character(X4),HomeScore=rep("",Games)) %>%
select(Date,AwayTeam,AwayScore,HomeTeam,HomeScore)
tmp
WeekID=17
WeeklyGames <- function(Week=1){
require(rvest)
require(tidyverse)
url <- paste("http://www.nfl.com/schedules/2016/REG",Week,sep="")
html <- read_html(url)
NFL <- html %>% html_nodes(".schedules-list-date,.time,.team-name") %>% html_text()
NFL <- gsub("\r","",gsub("\n","",gsub("\t","",NFL)))
Games <- length(which(NFL=="FINAL"))
for (i in 1:Games){
Date <- ifelse(NFL[(4*(i-1)+1)]!="FINAL",NFL[(4*(i-1)+1)],Date)
NFL <- if(i==1) {NFL} else if(NFL[(4*(i-1)+1)]==Date) {NFL} else {c(NFL[1:(4*(i-1))],Date,NFL[(4*(i-1)+1):(length(NFL))])}
}
tmp <- data.frame(matrix(NFL,nrow=Games,byrow=TRUE))
tmp <- tmp %>%
mutate(Date=as.character(X1),AwayTeam=as.character(X3),AwayScore=rep("",Games),HomeTeam=as.character(X4),HomeScore=rep("",Games)) %>%
select(Date,AwayTeam,AwayScore,HomeTeam,HomeScore)
tmp
}
Weeks <- data.frame(Week=c(1:WeekID))
Scores <- Weeks %>% mutate(Scores = Week %>% map(WeeklyScores))
FinalScores <- Scores %>% unnest
Weeks <- data.frame(Week=c((WeekID+1):17))
Games <- Weeks %>% mutate(Games = Week %>% map(WeeklyGames))
WeeklyGames(17)
WeekID = 16
Weeks <- data.frame(Week=c(1:WeekID))
Scores <- Weeks %>% mutate(Scores = Week %>% map(WeeklyScores))
FinalScores <- Scores %>% unnest
Weeks <- data.frame(Week=c((WeekID+1):17))
Games <- Weeks %>% mutate(Games = Week %>% map(WeeklyGames))
RemainingGames <- Games %>% unnest
rbind(FinalScores,RemainingGames) %>% mutate(AwayScore=as.integer(AwayScore),HomeScore=as.integer(HomeScore))
WeeklyUpdate <- function(WeekID=17){
if (WeekID==17){
Weeks <- data.frame(Week=c(1:WeekID))
Scores <- Weeks %>% mutate(Scores = Week %>% map(WeeklyScores))
FinalScores <- Scores %>% unnest
FinalScores
} else if (WeekID==0) {
Weeks <- data.frame(Week=c((WeekID+1):17))
Games <- Weeks %>% mutate(Games = Week %>% map(WeeklyGames))
RemainingGames <- Games %>% unnest
RemainingGames %>% mutate(AwayScore=as.integer(AwayScore),HomeScore=as.integer(HomeScore))
} else {
Weeks <- data.frame(Week=c(1:WeekID))
Scores <- Weeks %>% mutate(Scores = Week %>% map(WeeklyScores))
FinalScores <- Scores %>% unnest
Weeks <- data.frame(Week=c((WeekID+1):17))
Games <- Weeks %>% mutate(Games = Week %>% map(WeeklyGames))
RemainingGames <- Games %>% unnest
rbind(FinalScores,RemainingGames) %>% mutate(AwayScore=as.integer(AwayScore),HomeScore=as.integer(HomeScore))
}
}
WeeklyUpdate(16)
dat <- WeeklyUpdate(16)
n <- NFLSim(data=dat)
rawscore <- data %>% gather(key="ID",value="Team",c(3,5)) %>% mutate(Score=ifelse(ID=="AwayTeam",AwayScore,HomeScore)) %>% select(Team,Score)
rawagainst <- data %>% gather(key="ID",value="Team",c(3,5)) %>% mutate(Score=ifelse(ID=="AwayTeam",HomeScore,AwayScore)) %>% select(Team,Score)
data <- dat
rawscore <- data %>% gather(key="ID",value="Team",c(3,5)) %>% mutate(Score=ifelse(ID=="AwayTeam",AwayScore,HomeScore)) %>% select(Team,Score)
rawagainst <- data %>% gather(key="ID",value="Team",c(3,5)) %>% mutate(Score=ifelse(ID=="AwayTeam",HomeScore,AwayScore)) %>% select(Team,Score)
statsscore <- rawscore %>% group_by(Team) %>% summarise(mean=mean(Score,na.rm=TRUE),sd=sd(Score,na.rm=TRUE))
statsagainst <- rawagainst %>% group_by(Team) %>% summarise(mean=mean(Score,na.rm=TRUE),sd=sd(Score,na.rm=TRUE))
tmp <- data
tmp$AwayScore <- as.numeric(apply(dat[,3:6],1,function(x){
ifelse(is.na(x[2]),
max(round(rnorm(1,
mean=mean(c(statsscore$mean[statsscore$Team==x[1]],statsagainst$mean[statsagainst$Team==x[3]])),
sd=sqrt((statsscore$sd[statsscore$Team==x[1]]^2+(statsagainst$sd[statsagainst$Team==x[3]])^2)/4),0))),x[2])}))
mean(c(statsscore$mean[statsscore$Team==x[1]],statsagainst$mean[statsagainst$Team==x[3]]))
x
dat[,3:6]
tmp$AwayScore <- as.numeric(apply(dat[,3:6],1,function(x){
ifelse(is.na(x[2]),
max(round(rnorm(1,
mean=mean(c(statsscore$mean[statsscore$Team==x[1]],statsagainst$mean[statsagainst$Team==x[3]])),
sd=sqrt((statsscore$sd[statsscore$Team==x[1]]^2+(statsagainst$sd[statsagainst$Team==x[3]])^2)/4),0))),x[2])}))
devtools::document()
library(ProjectNFL)
NFLSim
NFLSim(data=WeeklyUpdate(16))
UpdateTeams(data=WeeklyUpdate(16))
data <- data[is.na(data$AwayScore)==FALSE,]
library(ProjectNFL)
UpdateTeams
library(ProjectNFL)
data <- WeeklyUpdate(16)
View(data)
rawscore <- data %>% gather(key="ID",value="Team",c(3,5)) %>% mutate(Score=ifelse(ID=="AwayTeam",AwayScore,HomeScore)) %>% select(Team,Score)
rawagainst <- data %>% gather(key="ID",value="Team",c(3,5)) %>% mutate(Score=ifelse(ID=="AwayTeam",HomeScore,AwayScore)) %>% select(Team,Score)
statsscore <- rawscore %>% group_by(Team) %>% summarise(mean=mean(Score,na.rm=TRUE),sd=sd(Score,na.rm=TRUE))
statsagainst <- rawagainst %>% group_by(Team) %>% summarise(mean=mean(Score,na.rm=TRUE),sd=sd(Score,na.rm=TRUE))
tmp <- data
tmp$AwayScore <- as.numeric(apply(dat[,3:6],1,function(x){
ifelse(is.na(x[2]),
max(round(rnorm(1,
mean=mean(c(statsscore$mean[statsscore$Team==x[1]],statsagainst$mean[statsagainst$Team==x[3]])),
sd=sqrt((statsscore$sd[statsscore$Team==x[1]]^2+(statsagainst$sd[statsagainst$Team==x[3]])^2)/4))),0),x[2])}))
tmp$HomeScore <- as.numeric(apply(dat[,3:6],1,function(x){
ifelse(is.na(x[4]),
max(round(rnorm(1,
mean=mean(c(statsscore$mean[statsscore$Team==x[3]],statsagainst$mean[statsagainst$Team==x[1]])),
sd=sqrt((statsscore$sd[statsscore$Team==x[3]]^2+(statsagainst$sd[statsagainst$Team==x[1]])^2)/4))),0),x[4])}))
tm2 <- UpdateTeams(tmp[!is.na(tmp$AwayScore),])
tm3 <- FinalRank(tm2)
data
tmp <- FinalDivRank(data=data)
tm2
tmp
data <- tm2
tmp <- data %>%
nest(-Division) %>%
mutate(Rank=lapply(data,function(x){rank(-(x$Wins+0.5*x$Ties)/(x$Wins+x$Losses+x$Ties),ties.method="min")})) %>%
unnest()
tmp2 <- tmp %>% mutate(Rank2=Rank) %>% nest(-Division,-Rank2)
tmp2 <- tmp2 %>% mutate(DivRank=lapply(data,function(x){if(nrow(x)==4) {FourTieDiv(x$Team[1],x$Team[2],x$Team[3],x$Team[4],data=data)+x$Rank[1]-1} else
if(nrow(x)==3) {ThreeTieDiv(x$Team[1],x$Team[2],x$Team[3],data=data)+x$Rank[1]-1} else
if(nrow(x)==2) {TwoTieDiv(x$Team[1],x$Team[2],data=data)+x$Rank[1]-1} else
x$Rank}))
View(tmp2)
tmp2 <- tmp2 %>% mutate(DivRank=lapply(data,function(x){if(nrow(x)==4) {FourTieDiv(x$Team[1],x$Team[2],x$Team[3],x$Team[4],data=data)+x$Rank[1]-1} else
if(nrow(x)==3) {ThreeTieDiv(x$Team[1],x$Team[2],x$Team[3],data=data)+x$Rank[1]-1} else
if(nrow(x)==2) {TwoTieDiv(x$Team[1],x$Team[2],data=data)+x$Rank[1]-1} else
x$Rank}))
TwoTieDiv("Saints","Buccaneers",data=tm2)
Team1 <- "Saints"
Team2 <- "Buccaneers"
tmp <- rbind(data[data$Team==Team1,],data[data$Team==Team2,])
tmp2 <- c(HeadtoHead(Team1,Team2),HeadtoHead(Team2,Team1))
for(i in 1:48){
if (data$HomeTeam[i]==Team1) {break}
}
Team1
dat
for(i in 1:48){
if (data$HomeTeam[i]==Team1) {break}
}
for(i in 1:48){
if (dat$HomeTeam[i]==Team1) {break}
}
data <- dat
for(i in 1:48){
if (data$HomeTeam[i]==Team1) {break}
}
Games1 <- c(NFLTeams$Team[sapply(data$HomeTeam[grep(data$HomeTeam[i],data$AwayTeam)],function(x){grep(x,NFLTeams$Team)})],
NFLTeams$Team[sapply(data$AwayTeam[grep(data$HomeTeam[i],data$HomeTeam)],function(x){grep(x,NFLTeams$Team)})])
HH <- (length(which(c(data$AwayScore[grep(data$HomeTeam[i],data$AwayTeam)] - data$HomeScore[grep(data$HomeTeam[i],data$AwayTeam)],
data$HomeScore[grep(data$HomeTeam[i],data$HomeTeam)] - data$AwayScore[grep(data$HomeTeam[i],data$HomeTeam)])>0 &
Games1 == Team2)) -
(length(which(c(data$AwayScore[grep(data$HomeTeam[i],data$AwayTeam)] - data$HomeScore[grep(data$HomeTeam[i],data$AwayTeam)],
data$HomeScore[grep(data$HomeTeam[i],data$HomeTeam)] - data$AwayScore[grep(data$HomeTeam[i],data$HomeTeam)])<0 &
Games1 == Team2))))+
if(is.null(Team3)==FALSE){
(length(which(c(data$AwayScore[grep(data$HomeTeam[i],data$AwayTeam)] - data$HomeScore[grep(data$HomeTeam[i],data$AwayTeam)],
data$HomeScore[grep(data$HomeTeam[i],data$HomeTeam)] - data$AwayScore[grep(data$HomeTeam[i],data$HomeTeam)])>0 &
Games1 == Team3)) -
(length(which(c(data$AwayScore[grep(data$HomeTeam[i],data$AwayTeam)] - data$HomeScore[grep(data$HomeTeam[i],data$AwayTeam)],
data$HomeScore[grep(data$HomeTeam[i],data$HomeTeam)] - data$AwayScore[grep(data$HomeTeam[i],data$HomeTeam)])<0 &
Games1 == Team3))))
}
else {0} +
if(is.null(Team4)==FALSE){
(length(which(c(data$AwayScore[grep(data$HomeTeam[i],data$AwayTeam)] - data$HomeScore[grep(data$HomeTeam[i],data$AwayTeam)],
library(ProjectNFL)
library(ProjectNFL)
WeekID <- 17
Weeks <- data.frame(Week=c(1:WeekID))
Scores <- Weeks %>% mutate(Scores = Week %>% map(WeeklyScores))
FinalScores <- Scores %>% unnest
Weeks <- data.frame(Week=c((WeekID+1):17))
Games <- Weeks %>% mutate(Games = Week %>% map(WeeklyGames))
WeekID <- 16
Weeks <- data.frame(Week=c(1:WeekID))
Scores <- Weeks %>% mutate(Scores = Week %>% map(WeeklyScores))
FinalScores <- Scores %>% unnest
Weeks <- data.frame(Week=c((WeekID+1):17))
Games <- Weeks %>% mutate(Games = Week %>% map(WeeklyGames))
RemainingGames <- Games %>% unnest
rbind(FinalScores,RemainingGames) %>% mutate(AwayScore=as.integer(AwayScore),HomeScore=as.integer(HomeScore))
WeeklyUpdate <- function(WeekID=17){
require(rvest)
require(tidyverse)
if (WeekID==17){
Weeks <- data.frame(Week=c(1:WeekID))
Scores <- Weeks %>% mutate(Scores = Week %>% map(WeeklyScores))
FinalScores <- Scores %>% unnest
FinalScores
} else if (WeekID==0) {
Weeks <- data.frame(Week=c((WeekID+1):17))
Games <- Weeks %>% mutate(Games = Week %>% map(WeeklyGames))
RemainingGames <- Games %>% unnest
RemainingGames %>% mutate(AwayScore=as.integer(AwayScore),HomeScore=as.integer(HomeScore))
} else {
Weeks <- data.frame(Week=c(1:WeekID))
Scores <- Weeks %>% mutate(Scores = Week %>% map(WeeklyScores))
FinalScores <- Scores %>% unnest
Weeks <- data.frame(Week=c((WeekID+1):17))
Games <- Weeks %>% mutate(Games = Week %>% map(WeeklyGames))
RemainingGames <- Games %>% unnest
rbind(FinalScores,RemainingGames) %>% mutate(AwayScore=as.integer(AwayScore),HomeScore=as.integer(HomeScore))
}
}
WeeklyUpdate(16)
WeeklyGames
WeeklyGames(17)
library(ProjectNFL)
devtools::document()
library(ProjectNFL)
rm(list=ls())
library(ProjectNFL)
dat <- WeeklyUpdate()
dat <- WeeklyUpdate(16)
tem <- UpdateTeams(dat)
View(tem)
View(dat)
FinalRank(scores=dat,data=tem)
NFLSim(sims=1,data=dat)
library(ProjectNFL)
dat <- WeeklyUpdate(16)
NFLSim(sims=1,data=dat)
NFLSim(sims=2,data=dat)
UpdateTeams(dat)
x <- NFLSim(sims=10,data=dat)
View(x)
devtools::document()
NFLTeams
View(dat)
n <- "Seahawks8,Rams10"
x <- "Seahawks8,Rams10"
y <- gregexpr("s[^a-z]+[0-9]+",x)
y
Spot <- as.vector(y[[1]])
Lens <- attr(y[[1]],"match.length")
z <- matrix(c(Spot,Lens),nrow=2,byrow=TRUE)
z[2,] <- apply(z,2,function(x){x[2]=x[1]+x[2]})
z[2,ncol(z)] <- nchar(x)
a <- as.vector(c(0,z))
a
b <- 0
for (i in 1:(length(a)-1)) {
b[i] <- substr(x,a[i]+1,a[i+1])
}
b[seq_along(b)[seq_along(b) %% 2 ==0]] <- gsub("[^0-9]","",b[seq_along(b) %% 2 == 0])
b
c <- data.frame(matrix(b,ncol=4,byrow=TRUE))
colnames(c) <- c("AwayTeam","AwayScore","HomeTeam","HomeScore")
for (j in 1:nrow(c)){
tmp$AwayScore[tmp$AwayTeam==c$AwayTeam[j] & tmp$HomeTeam==c$HomeTeam[j] & is.na(tmp$AwayScore)] <- c$AwayScore[j]
tmp$HomeScore[tmp$AwayTeam==c$AwayTeam[j] & tmp$HomeTeam==c$HomeTeam[j] & is.na(tmp$HomeScore)] <- c$HomeScore[j]
}
y <- gregexpr("s[^a-z]*[0-9]+",x)
y
Spot <- as.vector(y[[1]])
Lens <- attr(y[[1]],"match.length")
z <- matrix(c(Spot,Lens),nrow=2,byrow=TRUE)
z[2,] <- apply(z,2,function(x){x[2]=x[1]+x[2]})
z[2,ncol(z)] <- nchar(x)
a <- as.vector(c(0,z))
b <- 0
for (i in 1:(length(a)-1)) {
b[i] <- substr(x,a[i]+1,a[i+1])
}
b[seq_along(b)[seq_along(b) %% 2 ==0]] <- gsub("[^0-9]","",b[seq_along(b) %% 2 == 0])
b
library(ProjectNFL)
devtools::document()
library(ProjectNFL)
dat <- WeeklyUpdate(16)
View(dat)
NFLSim
NFLSim(sims=1,data=dat)
library(ProjectNFL)
dat
NFLSim(sims=1,data=dat)
library(ProjectNFL)
NFLSim(sims=1,data=dat)
NFLSim(sims=2,data=dat)
?NFLSim
library(ProjectNFL)
?NFLSim
devtools::document()
library(ProjectNFL)
?NFLSim
x
b
c <- data.frame(matrix(b,ncol=4,byrow=TRUE))
colnames(c) <- c("AwayTeam","AwayScore","HomeTeam","HomeScore")
c
length(which(dat$AwayTeam==c$AwayTeam[1]))
length(which(dat$AwayTeam==c$AwayTeam[1] & dat$HomeTeam==c$HomeTeam[1]))
length(which(dat$AwayTeam==c$AwayTeam[1] & dat$HomeTeam==c$HomeTeam[1] & is.na(dat$AwayScore)))
paste(c$AwayTeam[1]," at ",c$HomeTeam[1]," is not a game yet to be played.")
paste(c$AwayTeam[1]," at ",c$HomeTeam[1]," is not a game yet to be played.",sep="")
devtools::document()
library(ProjectNFL)
NFLSim(Games="Seahawks8Rams10")
NFLSim(Games="Seahawks8Rams10",data=dat)
devtools::document()
library(ProjectNFL)
NFLSim(sims=1,data=dat)
library(ProjectNFL)
NFLSim
NFLSim(sims=1,data=dat)
S <- NFLSim(data=dat)
View(S)
ncol(S)
